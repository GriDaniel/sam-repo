import os

def have_refdata(plugin):
    base_dir = "samreglib/testData"
    plugin_dir = os.path.join(base_dir, plugin)
    
    if not os.path.isdir(plugin_dir):
        print(f"'{plugin}' does not exist in '{base_dir}'.")
        return
    
    print(f"Found '{plugin}' in '{base_dir}'.")
    
    files = os.listdir(plugin_dir)
    xml_files = [f for f in files if f.endswith('.xml') and os.path.isfile(os.path.join(plugin_dir, f))]
    json_files = [f for f in files if f.endswith('.json') and os.path.isfile(os.path.join(plugin_dir, f))]
    
    xml_bases = {os.path.splitext(f)[0] for f in xml_files}
    json_bases = {os.path.splitext(f)[0] for f in json_files}
    
    matching_bases = sorted(list(xml_bases.intersection(json_bases)))
    
    if matching_bases:
        print("The following reference data was found:")
        for base in matching_bases:
            print(f"{base}.xml and {base}.json")
    else:
        print("No reference data found")


# Test function for a given plugin
def test_samuel_plugin(plugin):
    # Step 1: Find matching XML files
    xml_files = have_refdata(plugin)
    if not xml_files:
        pytest.skip(f"No matching XML and JSON files found for {plugin}")
    
    # Step 2: Set up the test data folder
    testdata_dir = os.path.join("Samuel", "Samuel", "testData", plugin)
    os.makedirs(testdata_dir, exist_ok=True)  # Create folder if it doesn't exist
    
    # Step 3: Temporarily move existing files and copy new ones
    with tempfile.TemporaryDirectory() as temp_dir:
        # Move any existing files to a safe place
        for file in os.listdir(testdata_dir):
            old_path = os.path.join(testdata_dir, file)
            new_path = os.path.join(temp_dir, file)
            shutil.move(old_path, new_path)
        
        # Copy the matching XML files to the test data folder
        for xml_file in xml_files:
            shutil.copy(xml_file, testdata_dir)
        
        # Step 4: Run Samuel.py with the plugin name
        samuel_path = os.path.join("Samuel", "Samuel", "Samuel.py")
        # Run the script in the background and capture what it prints
        result = subprocess.run(
            ["python", samuel_path, plugin],
            capture_output=True,  # Capture the output
            text=True  # Get output as text, not bytes
        )
        
        # Step 5: Put the original files back
        for file in os.listdir(temp_dir):
            old_path = os.path.join(temp_dir, file)
            new_path = os.path.join(testdata_dir, file)
            shutil.move(old_path, new_path)
        
        # Step 6: Show the output from Samuel.py
        print(f"Output from Samuel.py for {plugin}:")
        print(result.stdout)
