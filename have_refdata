import os

def have_refdata(plugin):
    base_dir = "samreglib/testData"
    plugin_dir = os.path.join(base_dir, plugin)
    
    if not os.path.isdir(plugin_dir):
        print(f"'{plugin}' does not exist in '{base_dir}'.")
        return
    
    print(f"Found '{plugin}' in '{base_dir}'.")
    
    files = os.listdir(plugin_dir)
    xml_files = [f for f in files if f.endswith('.xml') and os.path.isfile(os.path.join(plugin_dir, f))]
    json_files = [f for f in files if f.endswith('.json') and os.path.isfile(os.path.join(plugin_dir, f))]
    
    xml_bases = {os.path.splitext(f)[0] for f in xml_files}
    json_bases = {os.path.splitext(f)[0] for f in json_files}
    
    matching_bases = sorted(list(xml_bases.intersection(json_bases)))
    
    if matching_bases:
        print("The following reference data was found:")
        for base in matching_bases:
            print(f"{base}.xml and {base}.json")
    else:
        print("No reference data found")


def run_samuel():
    """Run Samuel.py and output the results to the pipeline."""
    # Set working directory to Samuel/Samuel, where Samuel.py is located
    solution_dir = os.path.join("Samuel", "Samuel")
    samuel_path = "Samuel.py"  # Path relative to the working directory
    result = subprocess.run(
        ["python", samuel_path],
        capture_output=True,
        text=True,
        cwd=solution_dir
    )
    # Print output for pipeline logging
    print(result.stdout)
    # Print errors if any
    if result.stderr:
        print(f"Errors: {result.stderr}")
