import os

def have_refdata(plugin):
    base_dir = "samreglib/testData"
    plugin_dir = os.path.join(base_dir, plugin)
    
    if not os.path.isdir(plugin_dir):
        print(f"'{plugin}' does not exist in '{base_dir}'.")
        return
    
    print(f"Found '{plugin}' in '{base_dir}'.")
    
    files = os.listdir(plugin_dir)
    xml_files = [f for f in files if f.endswith('.xml') and os.path.isfile(os.path.join(plugin_dir, f))]
    json_files = [f for f in files if f.endswith('.json') and os.path.isfile(os.path.join(plugin_dir, f))]
    
    xml_bases = {os.path.splitext(f)[0] for f in xml_files}
    json_bases = {os.path.splitext(f)[0] for f in json_files}
    
    matching_bases = sorted(list(xml_bases.intersection(json_bases)))
    
    if matching_bases:
        print("The following reference data was found:")
        for base in matching_bases:
            print(f"{base}.xml and {base}.json")
    else:
        print("No reference data found")


def modify_samuel_py(plugin, methoden_dict):
    """Modify Samuel.py to set methode to the parentKey for the given plugin."""
    samuel_path = os.path.join("Samuel", "Samuel", "Samuel.py")
    
    # Read the original content
    with open(samuel_path, 'r') as f:
        lines = f.readlines()
    
    # Find the parentKey for the plugin in methoden_dict
    parent_key = None
    for key, value in methoden_dict.items():
        if value == plugin:
            parent_key = key
            break
    if not parent_key:
        raise ValueError(f"No parentKey found for plugin {plugin}")
    
    # Modify the line that sets methode
    modified_lines = []
    for line in lines:
        if line.strip().startswith("methode ="):
            modified_lines.append(f"methode = \"{parent_key}\"\n")
        else:
            modified_lines.append(line)
    
    return samuel_path, ''.join(modified_lines)

def test_samuel(plugin):
    # Example methoden dictionary (replace with actual dictionary from Samuel.py if needed)
    methoden = {
        "parentKey1": "pluginA",
        "parentKey2": "pluginB",
        # Add other mappings as per Samuel.py
    }
    
    # Find matching XML files
    xml_files = have_refdata(plugin)
    if not xml_files:
        print(f"No matching XML files found for {plugin}")
        return
    
    # Set up test data folder
    testdata_dir = os.path.join("Samuel", "Samuel", "testData", plugin)
    os.makedirs(testdata_dir, exist_ok=True)
    
    # Temporarily modify Samuel.py and run it
    samuel_path = os.path.join("Samuel", "Samuel", "Samuel.py")
    original_content = ""
    
    with tempfile.TemporaryDirectory() as temp_dir:
        # Move existing test data files
        for file in os.listdir(testdata_dir):
            shutil.move(os.path.join(testdata_dir, file), temp_dir)
        
        # Copy XML files to test data directory
        for xml_file in xml_files:
            shutil.copy(xml_file, testdata_dir)
        
        # Read and backup original Samuel.py
        with open(samuel_path, 'r') as f:
            original_content = f.read()
        
        # Modify Samuel.py with the plugin's parentKey
        path, modified_content = modify_samuel_py(plugin, methoden)
        with open(path, 'w') as f:
            f.write(modified_content)
        
        # Run the modified Samuel.py
        result = subprocess.run(
            ["python", samuel_path],
            capture_output=True,
            text=True
        )
        
        # Restore original Samuel.py
        with open(samuel_path, 'w') as f:
            f.write(original_content)
        
        # Restore original test data files
        for file in os.listdir(temp_dir):
            shutil.move(os.path.join(temp_dir, file), testdata_dir)
        
        # Display output or errors
        if result.returncode != 0:
            print(f"Error running Samuel.py for {plugin}:\n{result.stderr}")
        else:
            print(f"Output for {plugin}:\n{result.stdout}")
